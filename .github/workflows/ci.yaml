# Copyright 2024, UNSW
#
# SPDX-License-Identifier: BSD-2-Clause

name: CI

on:
  pull_request:
  push:
    branches: [ "main" ]

jobs:
  build_manual:
    name: Build manual
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Create nix-shell and build PDF
        run: |
          cd docs
          nix-shell --run "pandoc MANUAL.md -o MANUAL.pdf"
      - name: Upload manual PDF
        uses: actions/upload-artifact@v4
        with:
          name: MANUAL
          path: docs/MANUAL.pdf
  build_linux_x86_64:
    name: Build and run examples (Linux x86-64)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Download Microkit SDK
        run: |
          wget https://trustworthy.systems/Downloads/microkit/microkit-sdk-1.4.1-dev.54+a8b7894-linux-x86-64.tar.gz
          tar xf microkit-sdk-1.4.1-dev.54+a8b7894-linux-x86-64.tar.gz
      - name: Install dependencies (via apt)
        # 'expect' is only a dependency for CI testing
        run: sudo apt update && sudo apt install -y make clang lld llvm qemu-system-arm device-tree-compiler expect gcc-aarch64-linux-gnu
      - name: Install Zig
        uses: mlugg/setup-zig@v1.2.0
        with:
          version: 0.14.0
      - name: Setup pyenv
        run: |
          python3 -m venv venv
          ./venv/bin/pip install --upgrade sdfgen==0.21.0
      - name: Build and run examples
        run: ./ci/examples.sh ${PWD}/microkit-sdk-1.4.1-dev.54+a8b7894-linux-x86-64
        shell: bash
        env:
          PYTHON: ${{ github.workspace }}/venv/bin/python
      - name: Upload built system images
        uses: actions/upload-artifact@v4
        with:
          # @ivanv: this needs to be fixed for the restructure
          path: build_*/loader.img
  build_macos_arm64:
    name: Build and run examples (macOS ARM64)
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Download Microkit SDK
        run: |
          wget https://trustworthy.systems/Downloads/microkit/microkit-sdk-1.4.1-dev.54+a8b7894-macos-aarch64.tar.gz
          tar xf microkit-sdk-1.4.1-dev.54+a8b7894-macos-aarch64.tar.gz
      - name: Install dependencies (via Homebrew)
        # 'expect' is only a dependency for CI testing
        run: |
          brew install llvm lld qemu dtc make dosfstools expect
          echo "/opt/homebrew/opt/llvm/bin:$PATH" >> $GITHUB_PATH
      - name: Install Zig
        uses: mlugg/setup-zig@v1.2.0
        with:
          version: 0.14.0
      - name: Setup pyenv
        run: |
          python3 -m venv venv
          ./venv/bin/pip install --upgrade sdfgen==0.21.0
      - name: Build and run examples
        run: ./ci/examples.sh ${PWD}/microkit-sdk-1.4.1-dev.54+a8b7894-macos-aarch64
        shell: bash
        env:
          PYTHON: ${{ github.workspace }}/venv/bin/python
      - name: Upload built system images
        uses: actions/upload-artifact@v4
        with:
          path: build_*/loader.img
  build_linux_x86_64_nix:
    name: Build and run examples (Linux x86-64 via Nix)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Download Microkit SDK
        run: |
          wget https://trustworthy.systems/Downloads/microkit/microkit-sdk-1.4.1-dev.54+a8b7894-linux-x86-64.tar.gz
          tar xf microkit-sdk-1.4.1-dev.54+a8b7894-linux-x86-64.tar.gz
      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Build and run examples
        run: nix develop -c bash -c './ci/examples.sh $MICROKIT_SDK'
      - name: Upload built system images
        uses: actions/upload-artifact@v4
        with:
          path: build_*/loader.img
